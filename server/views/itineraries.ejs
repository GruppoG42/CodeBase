<%- include('partials/header') -%>

<style>
    .itinerary {
        border: 1px solid #ddd;
        margin-bottom: 20px;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
    }

    .itinerary h2 {
        margin-top: 0;
    }

    .itinerary .day {
        margin-bottom: 10px;
        display: none; /* Hide the days by default */
    }

    .itinerary .day .stop {
        margin-left: 20px;
    }

    .itinerary .day .stop {
        margin-left: 20px;
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .itinerary {
        border: 1px solid #ddd;
        margin-bottom: 20px;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
    }

    .itinerary .day {
        border: 1px solid #ccc;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        display: none; /* Hide the days by default */
    }

    .itinerary .day .stop {
        border: 1px solid #bbb;
        margin-left: 20px;
        margin-top: 10px;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
    }

    .toggle {
        padding: 10px 20px; /* Increase the size of the button */
        color: white; /* Text color */
        border: none; /* Remove default border */
        cursor: pointer; /* Change cursor to pointer */
        transition: background-color 0.3s ease; /* Smooth transition */
    }

    .toggle.open {
        background-color: red; /* Red when open */
    }

    .toggle.closed {
        background-color: green; /* Green when closed */
    }

    .itinerary .day {
        display: none; /* Hide the days by default */
    }

    .toggle-active {
        padding: 10px 20px; /* Increase the size of the button */
        color: white; /* Text color */
        border: none; /* Remove default border */
        cursor: pointer; /* Change cursor to pointer */
        transition: background-color 0.3s ease; /* Smooth transition */
    }

    .delete {
        padding: 10px 20px; /* Increase the size of the button */
        color: white; /* Text color */
        border: none; /* Remove default border */
        cursor: pointer; /* Change cursor to pointer */
        transition: background-color 0.3s ease; /* Smooth transition */
    }

    .save {
        padding: 10px 20px; /* Increase the size of the button */
        color: white; /* Text color */
        background-color: #007BFF; /* Blue background */
        border: none; /* Remove default border */
        cursor: pointer; /* Change cursor to pointer */
        transition: background-color 0.3s ease; /* Smooth transition */
    }

    .save:hover {
        background-color: #0056b3; /* Darker blue on hover */
    }

    .unsave {
        padding: 10px 20px; /* Increase the size of the button */
        color: white; /* Text color */
        border: none; /* Remove default border */
        cursor: pointer; /* Change cursor to pointer */
        transition: background-color 0.3s ease; /* Smooth transition */
        background-color: #b30000; /* Darker red for unsaved */
    }

    .unsave:hover {
        background-color: #800000; /* Even darker red on hover */
    }

    .review-button {
        background-color: blue;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .review-button:hover {
        background-color: darkblue;
    }

    .toggle-active.activated {
        background-color: blue; /* Blue when activated */
    }

    .toggle-active.deactivated {
        background-color: orange; /* Orange when deactivated */
    }

    .delete.inactive {
        background-color: grey; /* Grey when inactive */
    }

    .delete.active {
        background-color: purple; /* Purple when active */
    }

</style>

<h1>Community Itineraries</h1>

<div id="itineraries"></div>
<div id="itineraryInfo"></div>


<script>
    async function fetchItineraries() {
        try {
            const response = await fetch('/api/getCommunityItineraries', {
                headers: {
                    'Content-Type': 'application/json',
                    'userId': '<%= locals.sid %>'
                }
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const itineraries = await response.json();

            // Check if the user has saved the itinerary
            for (let itinerary of itineraries) {
                const isSavedResponse = await fetch(`/api/isSavedItinerary?itineraryId=${itinerary._id}`, {
                    headers: {
                        'Content-Type': 'application/json',
                        'userId': '<%= locals.sid %>'
                    }
                });
                if (!isSavedResponse.ok) {
                    throw new Error(`HTTP error! status: ${isSavedResponse.status}`);
                }
                const isSavedData = await isSavedResponse.json();
                itinerary.isSaved = isSavedData;
            }

            return itineraries;
        } catch (error) {
            console.error('Error:', error);
        }
    }

    function createReviewForm(itinerary) {
        const reviewForm = document.createElement('form');
        reviewForm.innerHTML = `
        <label>
            <textarea name="reviewText" placeholder="Scrivi la tua recensione..."></textarea>
        </label>
        <label>
            Valutazione:
            <select name="rating">
                ${[1, 2, 3, 4, 5].map(star => `<option value="${star}">${star}</option>`).join('')}
            </select>
        </label>
        <button type="submit">Salva recensione</button>
    `;

        // Fetch the review from the server
        fetch(`/api/getItineraryReview?idItinerario=${itinerary._id}`, {
            headers: {
                'Content-Type': 'application/json',
                'userId': '<%= locals.sid %>'
            }
        }).then(response => {
            if (response.ok) {
                return response.json();
            }
        }).then(review => {
            if (review && review.recensione) {
                reviewForm.querySelector('textarea[name="reviewText"]').value = review.recensione;
                reviewForm.querySelector('select[name="rating"]').value = review.punteggio;
                reviewForm.style.display = 'block';
            }
        }).catch(error => {
            console.error('Error:', error);
        });


        reviewForm.style.display = 'none';

        reviewForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const reviewText = reviewForm.querySelector('textarea[name="reviewText"]').value;
            const rating = reviewForm.querySelector('select[name="rating"]').value;

            // Aggiorna la recensione sul server
            const idItinerario = itinerary._id;
            const response = await fetch(`/api/reviewItinerary`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'userId': '<%= locals.sid %>'
                },
                body: JSON.stringify({idItinerario, reviewText, rating}),
            });

            if (!response.ok) {
                console.error('Errore durante l\'aggiornamento della recensione');
            }
        });

        return reviewForm;
    }

    function createItineraryDiv(itinerary) {
        const itineraryDiv = document.createElement('div');
        itineraryDiv.className = 'itinerary';
        //reviews

        const reviewButton = document.createElement('button');
        reviewButton.textContent = 'Recensisci qua';
        reviewButton.className = 'review-button';

        const reviewForm = createReviewForm(itinerary);

        reviewButton.addEventListener('click', () => {
            if (reviewForm.style.display === 'none') {
                reviewForm.style.display = 'block';
            }else if (reviewForm.style.display === 'block'){
                reviewForm.style.display = 'none';
            }
        });


        const randomId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        const button = `<button name=${randomId} class="toggle closed">Toggle Days</button>`
        const toggleActiveButton = `<button class="toggle-active ${!itinerary.attivo ? 'deactivated' : 'activated'}">${!itinerary.attivo ? 'Disattivato' : 'Attivo'}</button>`
        const saveButton = itinerary.isSaved ? `<button class="unsave">Unsave</button>` : `<button class="save">Save</button>`;
        const totalPathDiv = `<div id="totalPath${itinerary._id}"></div>`
        const totalTimeDiv = `<div id="totalTime${itinerary._id}"></div>`

        itineraryDiv.innerHTML = `
    <h2>${itinerary.nome}</h2>
    <p>${itinerary.descrizione}</p>
    <p>Creatore: ${itinerary._userId}</p>
    <p>Numero di giorni: ${itinerary.giorni.length}</p>
    <p>Stato: ${itinerary.stato}</p>
    ${totalPathDiv}
    ${totalTimeDiv}
    ${button}
    ${toggleActiveButton}
    ${saveButton}
    ${itinerary.giorni.map(createDayDiv).join('')}
`;

        itineraryDiv.appendChild(reviewButton);
        itineraryDiv.appendChild(reviewForm);

        const saveUnsaveButton = itineraryDiv.querySelector(itinerary.isSaved ? '.unsave' : '.save');
        saveUnsaveButton.addEventListener('click', () => {
            const url = itinerary.isSaved ? '/api/removeItineraryFromSaved' : '/api/addItineraryToSaved';
            fetch(url, {
                method: 'PATCH',
                body: JSON.stringify({itineraryId: itinerary._id}),
                headers: {
                    'Content-Type': 'application/json',
                    'userId': '<%= locals.sid %>'
                },
            }).then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                // Update the button text and class
                itinerary.isSaved = !itinerary.isSaved;
                saveUnsaveButton.textContent = itinerary.isSaved ? 'Unsave' : 'Save';
                saveUnsaveButton.className = itinerary.isSaved ? 'unsave' : 'save';
            }).catch(error => {
                console.error('Error:', error);
            });
        });
        return itineraryDiv;
    }

    function createDayDiv(day) {
        return `
    <div class="day">
        <h3>Day: ${day.descrizione}</h3>
        ${day.tappe.map(createStopDiv).join('')}
    </div>
    `;
    }

    function createStopDiv(stop, index) {
        const ristori = Array.isArray(stop.ristori) ? stop.ristori.join(', ') : stop.ristori;
        const alloggi = Array.isArray(stop.alloggi) ? stop.alloggi.join(', ') : stop.alloggi;
        return `
        <div class="stop">
            <h4>Tappa ${index + 1}</h4>
            <p>Descrizione: ${stop.descrizione}</p>
            <p>Location: ${stop.luogo}</p>
            <p>Ristori: ${ristori}</p>
            <p>Alloggi: ${alloggi}</p>
        </div>
    `;
    }

    fetchItineraries().then(itineraries => {
        const itinerariesDiv = document.getElementById('itineraries');
        itineraries.forEach(itinerary => {
            const itineraryDiv = createItineraryDiv(itinerary);
            itinerariesDiv.appendChild(itineraryDiv);
            addToggleEventListener(itineraryDiv);
            addToggleActiveEventListener(itineraryDiv, itinerary._id);

            document.getElementById(`totalPath${itinerary._id}`).innerHTML = `Kilometri totali:`;
            document.getElementById(`totalTime${itinerary._id}`).innerHTML = `Tempo totale:`;

            // Assuming you have the necessary parameters for the fetch requests
            const id = itinerary._id;
            fetch(`/api/totalPath?idItinerario=${id}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById(`totalPath${id}`).innerHTML = `Kilometri totali: ${(data) / 1000} km`; // Update this line
                }).catch(error => {
                console.error('Error:', error);
            });

            fetch(`/api/calcTimeItinerary?idItinerario=${id}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById(`totalTime${id}`).innerHTML = `Tempo totale: ${(data / 3600).toFixed(1)} ore`; // Update this line
                }).catch(error => {
                console.error('Error:', error);
            });
        });
    });

    function addToggleEventListener(itineraryDiv) {
        const toggleButton = itineraryDiv.querySelector('.toggle');
        toggleButton.classList.remove('open');
        toggleButton.classList.add('closed');
        toggleButton.addEventListener('click', () => {
            const days = itineraryDiv.querySelectorAll('.day');
            days.forEach(day => {
                if (!day.style.display || day.style.display === 'none') {
                    day.style.display = 'block';
                    toggleButton.classList.remove('closed');
                    toggleButton.classList.add('open');
                } else {
                    day.style.display = 'none';
                    toggleButton.classList.remove('open');
                    toggleButton.classList.add('closed');
                }
            });
        });
    }

    function addToggleActiveEventListener(itineraryDiv, itineraryId) {
        const toggleActiveButton = itineraryDiv.querySelector('.toggle-active');
        toggleActiveButton.addEventListener('click', () => {
            // Here you can add the code to update the activation status of the itinerary in your database
            // After updating the database, update the button text
            let active = toggleActiveButton.textContent === 'Attivo';
            if (active) {
                toggleActiveButton.textContent = 'Disattivato';
                toggleActiveButton.classList.remove('activated');
                toggleActiveButton.classList.add('deactivated');
            } else {
                toggleActiveButton.textContent = 'Attivo';
                toggleActiveButton.classList.remove('deactivated');
                toggleActiveButton.classList.add('activated');
            }

            const url = `/api/updateActive`

            fetch(url, {
                method: 'PUT',
                body: JSON.stringify({idItinerario: itineraryId, active: !active}),
                headers: {
                    'Content-Type': 'application/json',
                },
            }).then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
            }).catch(error => {
                console.error('Error:', error);
            });

        });
    }

</script>

<%- include('partials/footer') -%>